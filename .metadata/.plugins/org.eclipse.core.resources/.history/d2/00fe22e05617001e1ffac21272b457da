package Chat2;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.Properties;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

import org.apache.log4j.BasicConfigurator;

import redis.clients.jedis.Jedis;

import javax.swing.JTextArea;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.jms.TextMessage;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.swing.JButton;

public class Chat2 extends JFrame {

	private JPanel contentPane;
	private JTextField txtMessage;
	private JTextArea chatArea;
	private JButton btnGui;
	private Jedis jedis;
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Chat2 frame = new Chat2();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public Chat2() {
		setTitle("Chat 2");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 450, 300);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		chatArea = new JTextArea();
		chatArea.setBounds(10, 11, 416, 199);
		contentPane.add(chatArea);
		
		JScrollPane scrollPane = new JScrollPane(chatArea,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
		scrollPane.setBounds(10, 11, 416, 199);
		contentPane.add(scrollPane);
		
		txtMessage = new JTextField();
		txtMessage.setBounds(10, 214, 308, 49);
		contentPane.add(txtMessage);
		txtMessage.setColumns(10);
		
		btnGui = new JButton("G\u1EEDi");
		btnGui.setBounds(326, 214, 100, 49);
		contentPane.add(btnGui);
		jedis = new Jedis("localhost", 6379);
	        //System.out.println("Redis connected: " + jedis.isConnected());
	        // Kiểm tra xem có lịch sử tin nhắn trong Redis không
	        if (jedis.exists("message_history")) {
	            // Lấy lịch sử tin nhắn từ Redis
	            List<String> chatHistory = jedis.lrange("message_history", 0, -1);
	            // Hiển thị lịch sử tin nhắn lên giao diện
	            for (String message : chatHistory) {
	                chatArea.append(message + "\n");
	            }
	        }
		
		createFormEvent();
		listenMessage();
	}
	private void listenMessage() {
        //thiết lập môi trường cho JMS
        BasicConfigurator.configure();
        //thiết lập môi trường cho JJNDI
        Properties settings = new Properties();
        settings.setProperty(Context.INITIAL_CONTEXT_FACTORY,
                "org.apache.activemq.jndi.ActiveMQInitialContextFactory");
        settings.setProperty(Context.PROVIDER_URL, "tcp://localhost:61616");
        //tạo context
        Context ctx = null;
        try {
            ctx = new InitialContext(settings);
            //lookup JMS connection factory
            Object obj = ctx.lookup("TopicConnectionFactory");
            ConnectionFactory factory = (ConnectionFactory) obj;
            //tạo connection
            Connection con = factory.createConnection("admin", "admin");
            //nối đến MOM
            con.start();
            //tạo session
            Session session = con.createSession(
                    /*transaction*/false,
                    /*ACK*/Session.CLIENT_ACKNOWLEDGE
            );
            //tạo consumer
            Destination destination = (Destination) ctx.lookup("dynamicTopics/thanthidet");
            MessageConsumer receiver = session.createConsumer(destination);
            //receiver.receive();//blocked method
            //Cho receiver lắng nghe trên queue, chừng có message thì notify
            receiver.setMessageListener(new MessageListener() {
                @Override
                //có message đến queue, phương thức này được thực thi
                public void onMessage(Message msg) {//msg là message nhận được
                    try {
                        if (msg instanceof TextMessage) {
                            TextMessage tm = (TextMessage) msg;
                            String txt = tm.getText();
                            chatArea.append(txt);
//                            jedis.rpush("message_history", txt);
                            System.out.println("XML= " + txt);
                            msg.acknowledge();//gửi tín hiệu ack
                        }
                    } catch (
                            Exception e) {
                        e.printStackTrace();
                    }
                }
            });
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
    private void sendMessage(String message) {
    	 //thiết lập môi trường cho JMS logging
        BasicConfigurator.configure();
        //thiết lập môi trường cho JJNDI
        Properties settings = new Properties();
        settings.setProperty(Context.INITIAL_CONTEXT_FACTORY,
                "org.apache.activemq.jndi.ActiveMQInitialContextFactory");
        settings.setProperty(Context.PROVIDER_URL, "tcp://localhost:61616");
        //tạo context
        Context ctx = null;
        try {
            ctx = new InitialContext(settings);
            //lookup JMS connection factory
            Object obj = ctx.lookup("TopicConnectionFactory");
            ConnectionFactory factory = (ConnectionFactory) obj;
            //tạo connection
            Connection con = factory.createConnection("admin", "admin");
            //nối đến MOM
            con.start();

            Session session = con.createSession(
                    /*transaction*/false,
                    /*ACK*/Session.AUTO_ACKNOWLEDGE
            );
            Destination destination = (Destination)
                    ctx.lookup("dynamicTopics/thanthidet");
            //tạo producer
            MessageProducer producer = session.createProducer(destination);
            //Tạo 1 message
            Message msg = session.createTextMessage(message);
            ////gửi
            producer.send(msg);
            //shutdown connection
            session.close();
            con.close();
            System.out.println("Finished...");
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
    
    public void createFormEvent() {
        btnGui.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String message = txtMessage.getText().trim();
                if (message.isBlank()) {
                } else {
                    txtMessage.setText("");
//                    jedis.rpush("chat_history", message);
                    sendMessage("Chat 2: " + message + '\n');
                  
                }
            }
        });
    }
}
